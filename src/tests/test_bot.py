import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from sqlalchemy.ext.asyncio import AsyncSession

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞
from src.bot.logic import views, keyboards, fsm
from src.bot.logic.utils import commands
from src.bot.logic.handlers import simple
from src.database import crud, models


# –¢–µ—Å—Ç—ã –¥–ª—è views.py
def test_view_messages():
    assert views.get_start_msg("Test") == "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—éüëã, Test!\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é - –Ω–∞–ø–∏—à–∏\n/help"
    assert views.get_help_msg() == "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞:"
    assert views.get_menu_msg() == '–ú–µ–Ω—é'
    assert views.get_profile_msg() == '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å'
    assert views.get_playlists_msg() == '–í–∞—à–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã'
    assert views.get_playlists_error_msg() == '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É :('
    assert views.get_bot_start_msg() == "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
    assert views.get_bot_stop_msg() == "–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É"
    assert views.get_analysis_msg() == '–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ñ–∞–π–ª —Å –≤–∞—à–∏–º —Ç—Ä–µ–∫–æ–º'
    assert views.get_garbage_msg() == '–ü—Ä–æ–ø–∏—à–∏—Ç–µ /start - —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!'
    assert views.get_playlist_creation_msg() == '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞'
    assert views.get_error_message() == "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :("


# –¢–µ—Å—Ç—ã –¥–ª—è keyboards.py
def test_keyboard_creation():
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_kb = keyboards.get_main_menu_kb()
    assert len(main_kb.keyboard) == 1
    assert main_kb.keyboard[0][0].text == "–ê–Ω–∞–ª–∏–∑"
    assert main_kb.keyboard[0][1].text == "–ü—Ä–æ—Ñ–∏–ª—å"

    # –ú–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞
    analysis_kb = keyboards.get_analysis_kb()
    assert len(analysis_kb.keyboard) == 1
    assert analysis_kb.keyboard[0][0].text == "–ù–∞–∑–∞–¥"

    # –ü—Ä–æ—Ñ–∏–ª—å
    profile_kb = keyboards.get_profile_kb()
    assert len(profile_kb.keyboard) == 2
    assert profile_kb.keyboard[0][0].text == "–ü–ª–µ–π–ª–∏—Å—Ç—ã"
    assert profile_kb.keyboard[0][1].text == "–°–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç"

    # –ü–ª–µ–π–ª–∏—Å—Ç—ã
    playlists = [(1, "Playlist1"), (2, "Playlist2")]
    playlists_kb = keyboards.get_playlists_kb(playlists)
    assert len(playlists_kb.inline_keyboard) == 3  # 2 –ø–ª–µ–π–ª–∏—Å—Ç–∞ + –≤—ã—Ö–æ–¥


# –¢–µ—Å—Ç—ã –¥–ª—è fsm.py
def test_fsm_structure():
    assert fsm.STATES[fsm.User.analysis] == fsm.User.menu
    assert fsm.STATES[fsm.User.profile] == fsm.User.menu
    assert fsm.STATES[fsm.User.creation] == fsm.User.profile

    assert fsm.KEYBOARDS[fsm.User.menu] == keyboards.get_main_menu_kb
    assert fsm.VIEWS[fsm.User.analysis] == views.get_analysis_msg


# –¢–µ—Å—Ç—ã –¥–ª—è commands.py
@pytest.mark.asyncio
async def test_set_commands():
    mock_bot = AsyncMock()
    mock_bot.set_my_commands = AsyncMock()

    with patch('src.bot.logic.settings.Secrets', new=MagicMock(admins_id="123 456")):
        await commands.set_commands(mock_bot)

        assert mock_bot.set_my_commands.call_count == 2
        assert len(mock_bot.set_my_commands.call_args_list[0][0][0]) == 2  # –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        assert len(mock_bot.set_my_commands.call_args_list[1][0][0]) == 3  # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã


# –¢–µ—Å—Ç—ã –¥–ª—è simple.py
# @pytest.mark.asyncio
# async def test_start_handler():
#     mock_message = AsyncMock()
#     mock_message.from_user.id = 123
#     mock_message.from_user.full_name = "Test User"
#     mock_message.from_user.username = "test"
#
#     # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ: –¥–æ–±–∞–≤–ª—è–µ–º –º–æ–∫ –¥–ª—è bot
#     mock_message.bot = AsyncMock()
#
#     mock_state = AsyncMock()
#
#     # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
#     mock_user = MagicMock()
#     mock_user.id = 123
#
#     with patch('src.database.crud.get_user', AsyncMock(return_value=None)), \
#             patch('src.database.crud.create_user', AsyncMock(return_value=mock_user)), \
#             patch('src.database.crud.create_playlist', AsyncMock()):
#         await simple.start_command_handler(mock_message, mock_state)
#
#         mock_message.answer.assert_called_with(
#             views.get_start_msg("Test User"),
#             reply_markup=keyboards.get_main_menu_kb()
#         )
#         mock_state.set_state.assert_called_with(fsm.User.menu)


@pytest.mark.asyncio
async def test_back_handler():
    mock_message = AsyncMock()
    mock_state = AsyncMock()
    mock_state.get_state.return_value = fsm.User.profile

    await simple.back_handler(mock_message, mock_state)
    mock_state.set_state.assert_called_with(fsm.User.menu)
    mock_message.answer.assert_called_with(
        views.get_menu_msg(),
        reply_markup=keyboards.get_main_menu_kb()
    )


@pytest.mark.asyncio
async def test_audio_analysis_handler():
    mock_message = AsyncMock()
    mock_state = AsyncMock()

    await simple.audio_analysis_handler(mock_message, mock_state)
    mock_state.set_state.assert_called_with(fsm.User.analysis)
    mock_message.answer.assert_called_with(
        views.get_analysis_msg(),
        reply_markup=keyboards.get_analysis_kb()
    )


# –¢–µ—Å—Ç—ã –¥–ª—è crud.py
@pytest.mark.asyncio
async def test_user_crud():
    mock_session = AsyncMock(spec=AsyncSession)
    mock_user = models.User(id=123, username="test")

    # Create
    await crud.create_user(mock_session, 123, "test")
    mock_session.add.assert_called()
    mock_session.commit.assert_called()

    # Read
    mock_session.get.return_value = mock_user
    user = await crud.get_user(mock_session, 123)
    assert user.id == 123

    # Update
    await crud.update_user(mock_session, 123, new_username="new_test")
    assert mock_session.get.return_value.username == "new_test"

    # Delete
    mock_session.get.return_value = mock_user
    result = await crud.delete_user(mock_session, 123)
    assert result is True
    mock_session.delete.assert_called_with(mock_user)


@pytest.mark.asyncio
async def test_playlist_crud():
    mock_session = AsyncMock(spec=AsyncSession)

    # Create
    await crud.create_playlist(mock_session, "Test", 123)
    mock_session.add.assert_called()
    mock_session.commit.assert_called()

    # Get user playlists
    mock_session.execute.return_value = MagicMock()
    mock_session.execute.return_value.all.return_value = [(1, "Test")]
    playlists = await crud.get_user_playlists(mock_session, 123)
    assert playlists == [(1, "Test")]


# –¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–µ–π
def test_models_structure():
    assert hasattr(models.User, 'playlists')
    assert hasattr(models.Playlist, 'audios')
    assert hasattr(models.Audio, 'playlists')
    assert models.Playlist.__table_args__ is not None
